import dotenv from 'dotenv';
import { dirname, join } from 'path';
import { fileURLToPath } from 'url';
import { MongoClient } from 'mongodb';

// Configurar vari√°veis de ambiente
const __dirname = dirname(fileURLToPath(import.meta.url));
dotenv.config({ path: join(__dirname, '../.env') });

// Verificar par√¢metros
const phoneNumber = process.argv[2];
if (!phoneNumber) {
  console.error('‚ùå Uso: node forceLCommand.js <n√∫mero_telefone>');
  console.error('   Exemplo: node forceLCommand.js 558481843434');
  process.exit(1);
}

// Validar formato do n√∫mero
if (!phoneNumber.match(/^\d+$/)) {
  console.error('‚ùå N√∫mero inv√°lido! Use apenas d√≠gitos (ex: 558481843434)');
  process.exit(1);
}

console.log(`\nüì± For√ßando envio de newsletter para: ${phoneNumber}`);
console.log('‚îÄ'.repeat(50));

async function forceNewsletter() {
  let mongoClient;
  let wasAlreadyDeveloper = false;
  
  try {
    // 1. Conectar ao MongoDB
    console.log('üîó Conectando ao MongoDB...');
    const mongoUrl = process.env.MONGODB_URL || 'mongodb://localhost:27017/newsletter';
    mongoClient = new MongoClient(mongoUrl);
    await mongoClient.connect();
    const db = mongoClient.db('newsletter');
    console.log('‚úÖ MongoDB conectado');
    
    // 2. Verificar se j√° √© desenvolvedor
    const developerNumbers = process.env.DEVELOPER_NUMBERS?.split(',') || [];
    wasAlreadyDeveloper = developerNumbers.includes(phoneNumber);
    
    if (!wasAlreadyDeveloper) {
      console.log('üîß Adicionando temporariamente como desenvolvedor...');
      
      // Adicionar ao .env temporariamente
      const newDeveloperNumbers = [...developerNumbers, phoneNumber].join(',');
      process.env.DEVELOPER_NUMBERS = newDeveloperNumbers;
      
      // Atualizar no arquivo .env
      const fs = await import('fs');
      const envPath = join(__dirname, '../.env');
      let envContent = fs.readFileSync(envPath, 'utf8');
      
      if (envContent.includes('DEVELOPER_NUMBERS=')) {
        envContent = envContent.replace(
          /DEVELOPER_NUMBERS=.*/,
          `DEVELOPER_NUMBERS=${newDeveloperNumbers}`
        );
      } else {
        envContent += `\nDEVELOPER_NUMBERS=${newDeveloperNumbers}`;
      }
      
      fs.writeFileSync(envPath, envContent);
      console.log('‚úÖ Adicionado como desenvolvedor tempor√°rio');
    }
    
    // 3. Importar e executar o whatsappService
    console.log('\nü§ñ Executando comando "l"...');
    const whatsappService = (await import('../src/services/whatsappService.js')).default;
    
    // Configurar database
    whatsappService.setDatabase(db);
    
    // Verificar conex√£o
    if (!whatsappService.isClientConnected()) {
      throw new Error('WhatsApp n√£o est√° conectado. O servidor precisa estar rodando.');
    }
    
    // Executar o comando
    await whatsappService.triggerNewsletterNow(phoneNumber);
    
    console.log('\n‚úÖ Newsletter enviada com sucesso!');
    console.log('üì≤ Verifique o WhatsApp do n√∫mero informado');
    
  } catch (error) {
    console.error('\n‚ùå Erro:', error.message);
    
    if (error.message.includes('n√£o est√° conectado')) {
      console.error('\nüí° O servidor principal precisa estar rodando!');
      console.error('   Execute: npm start');
    }
    
  } finally {
    // Remover do .env se foi adicionado temporariamente
    if (!wasAlreadyDeveloper && phoneNumber) {
      try {
        console.log('\nüßπ Removendo status de desenvolvedor tempor√°rio...');
        
        const fs = await import('fs');
        const envPath = join(__dirname, '../.env');
        let envContent = fs.readFileSync(envPath, 'utf8');
        
        const developerNumbers = process.env.DEVELOPER_NUMBERS?.split(',') || [];
        const filteredNumbers = developerNumbers.filter(num => num !== phoneNumber);
        
        envContent = envContent.replace(
          /DEVELOPER_NUMBERS=.*/,
          `DEVELOPER_NUMBERS=${filteredNumbers.join(',')}`
        );
        
        fs.writeFileSync(envPath, envContent);
        console.log('‚úÖ Status de desenvolvedor removido');
        
      } catch (error) {
        console.error('‚ö†Ô∏è  Erro ao remover desenvolvedor:', error.message);
      }
    }
    
    if (mongoClient) {
      await mongoClient.close();
      console.log('\nüîí Conex√£o MongoDB fechada');
    }
    
    process.exit(0);
  }
}

// Executar
forceNewsletter().catch(error => {
  console.error('‚ùå Erro fatal:', error);
  process.exit(1);
});