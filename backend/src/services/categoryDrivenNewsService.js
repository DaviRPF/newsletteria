import aiService from './aiService.js';
import categoryService from './categoryService.js';
import newsService from './newsService.js';

class CategoryDrivenNewsService {
  constructor() {
    // Cache para evitar re-identifica√ß√£o de categorias muito frequente
    this.categoryCache = new Map();
    this.cacheExpiration = 60 * 60 * 1000; // 1 hora
  }

  // FLUXO PRINCIPAL: IA identifica categorias ‚Üí busca nas fontes espec√≠ficas
  async getPersonalizedNews(userProfile) {
    try {
      console.log('üß† Iniciando fluxo categoria-dirigido...');
      
      // 1. IA identifica categorias espec√≠ficas (1 chamada de IA)
      const userCategories = await this.identifyUserCategories(userProfile);
      
      if (userCategories.length === 0) {
        console.log('üì∞ Nenhuma categoria espec√≠fica ‚Üí usando fontes gerais');
        return await this.getGeneralNews();
      }
      
      // 2. Busca nas fontes espec√≠ficas dessas categorias (SEM IA)
      const specificNews = await this.getNewsFromSpecificCategories(userCategories);
      
      // 3. Adiciona algumas not√≠cias gerais para diversidade
      const generalNews = await this.getGeneralNews(2);
      
      // 4. Combina e retorna as melhores
      const allNews = [...specificNews, ...generalNews];
      const finalNews = this.selectBestNews(allNews, 6); // GARANTIR 6 NOT√çCIAS
      
      console.log(`‚úÖ ${finalNews.length} not√≠cias categoria-dirigidas coletadas`);
      
      // FOR√áA RETORNAR 6 NOT√çCIAS
      if (finalNews.length < 6) {
        console.log(`‚ö†Ô∏è Apenas ${finalNews.length} not√≠cias selecionadas, buscando mais...`);
        // Pega mais not√≠cias gerais se necess√°rio
        const extraGeneral = await this.getGeneralNews(6 - finalNews.length);
        finalNews.push(...extraGeneral);
      }
      
      return finalNews.slice(0, 6); // GARANTE EXATAMENTE 6
      
    } catch (error) {
      console.error('‚ùå Erro no fluxo categoria-dirigido:', error);
      
      // Fallback: not√≠cias gerais
      return await this.getGeneralNews();
    }
  }

  // Identifica categorias do usu√°rio usando IA (com cache)
  async identifyUserCategories(userProfile) {
    const profileDescription = userProfile?.profileDescription || '';
    
    if (!profileDescription.trim()) {
      console.log('‚ö†Ô∏è Perfil vazio, usando categorias gerais');
      return [];
    }
    
    // Verifica cache
    const cacheKey = profileDescription.toLowerCase().trim();
    const cached = this.categoryCache.get(cacheKey);
    
    if (cached && (Date.now() - cached.timestamp) < this.cacheExpiration) {
      console.log(`üîÑ Categorias em cache: ${cached.categories.join(', ')}`);
      return cached.categories;
    }
    
    // Primeiro tenta IA, depois fallback local
    try {
      // Verifica se a API key est√° configurada e v√°lida
      const hasValidKey = process.env.GEMINI_API_KEY && 
                         process.env.GEMINI_API_KEY !== 'your-gemini-api-key' &&
                         process.env.GEMINI_API_KEY.length > 30;
                         
      if (hasValidKey) {
        console.log('ü§ñ Usando IA para identificar categorias...');
        const categories = await aiService.identifyUserCategories(profileDescription);
        
        // Filtra apenas categorias v√°lidas que existem no CategoryService
        const validCategories = categories.filter(cat => 
          categoryService.categoryMapping[cat] !== undefined
        );
        
        if (validCategories.length > 0) {
          // Salva no cache
          this.categoryCache.set(cacheKey, {
            categories: validCategories,
            timestamp: Date.now()
          });
          
          console.log(`üéØ IA identificou categorias: ${validCategories.join(', ')}`);
          return validCategories;
        } else {
          console.log('‚ö†Ô∏è IA n√£o retornou categorias v√°lidas, usando fallback local');
        }
      } else {
        console.log('‚ö†Ô∏è API key inv√°lida, usando identifica√ß√£o local');
      }
      
      // Fallback: an√°lise local
      const localCategories = this.identifyCategoriesLocally(profileDescription);
      
      // Salva no cache
      this.categoryCache.set(cacheKey, {
        categories: localCategories,
        timestamp: Date.now()
      });
      
      return localCategories;
      
    } catch (error) {
      console.error('‚ùå Erro na identifica√ß√£o por IA:', error.message);
      
      // Fallback: an√°lise local simples
      const localCategories = this.identifyCategoriesLocally(profileDescription);
      
      // Salva no cache
      this.categoryCache.set(cacheKey, {
        categories: localCategories,
        timestamp: Date.now()
      });
      
      return localCategories;
    }
  }

  // Fallback: identifica√ß√£o local sem IA
  identifyCategoriesLocally(profileDescription) {
    const profile = profileDescription.toLowerCase();
    const detectedCategories = [];
    
    // Mapea palavras-chave para categorias - ESPEC√çFICAS APENAS
    const keywordMapping = {
      'tecnologia': ['programa√ß√£o', 'software', 'tech', 'desenvolvimento', 'c√≥digo'],
      'investimentos': ['investimento', 'a√ß√µes', 'bolsa', 'financeiro', 'dinheiro'],
      'futebol': ['futebol', 'flamengo', 'palmeiras', 'corinthians', 'brasileiro'],
      'volei': ['v√¥lei', 'volei', 'volleyball'],
      'handebol': ['handebol', 'handball'],
      'rugby': ['rugby', 'rugbi'],
      'futsal': ['futsal'],
      'volei-praia': ['v√¥lei de praia', 'volei de praia', 'beach volleyball'],
      'formula1': ['formula 1', 'f1', 'formula um', 'f√≥rmula 1'],
      'politica': ['pol√≠tica', 'governo', 'lula', 'bolsonaro', 'elei√ß√£o'],
      'economia': ['economia', 'mercado', 'empresa', 'neg√≥cio'],
      'saude': ['sa√∫de', 'medicina', 'm√©dico', 'hospital'],
      'educacao': ['educa√ß√£o', 'ensino', 'escola', 'professor'],
      'psicologia': ['psicologia', 'psic√≥logo', 'terapia'],
      'cultura': ['cultura', 'arte', 'm√∫sica', 'cinema', 'teatro'],
      'internacional': ['internacional', 'mundo', 'global', 'exterior']
    };
    
    // ESPORTES ESPEC√çFICOS N√ÉO LISTADOS QUE DEVEM SER IGNORADOS
    const specificSportsToIgnore = [
      'basquete', 'basketball', 't√™nis', 'tennis', 
      'nata√ß√£o', 'swimming', 'ciclismo', 'atletismo', 'jud√¥', 'carat√™',
      'mma', 'boxe', 'surf', 'skate', 'motociclismo', 'automobilismo'
    ];
    
    // Se menciona esporte espec√≠fico n√£o listado, N√ÉO adiciona nada de esporte
    const mentionsIgnoredSport = specificSportsToIgnore.some(sport => 
      profile.includes(sport)
    );
    
    if (mentionsIgnoredSport) {
      console.log(`üö´ Esporte espec√≠fico n√£o listado detectado - n√£o incluindo categoria de esporte`);
    }
    
    for (const [category, keywords] of Object.entries(keywordMapping)) {
      const hasKeyword = keywords.some(keyword => profile.includes(keyword));
      if (hasKeyword) {
        detectedCategories.push(category);
      }
    }
    
    // S√≥ adiciona "esporte" gen√©rico se mencionar "esportes" EM GERAL e N√ÉO mencionar esporte espec√≠fico ignorado
    if (!mentionsIgnoredSport && 
        (profile.includes('esportes') || profile.includes('esporte em geral') || profile.includes('acompanho esportes'))) {
      detectedCategories.push('esporte');
    }
    
    console.log(`üîç Categorias detectadas localmente: ${detectedCategories.join(', ')}`);
    return detectedCategories;
  }

  // Busca not√≠cias nas fontes espec√≠ficas das categorias identificadas
  async getNewsFromSpecificCategories(userCategories) {
    const allNews = [];
    console.log(`üìÇ Buscando em categorias: ${userCategories.join(', ')}`);
    
    // Para cada categoria, pega suas fontes espec√≠ficas
    for (const category of userCategories) {
      const categoryConfig = categoryService.categoryMapping[category];
      if (!categoryConfig) continue;
      
      console.log(`üì∞ Categoria "${category}":`);
      
      // Busca em cada fonte espec√≠fica da categoria
      for (const [sourceName, sourceUrl] of Object.entries(categoryConfig.sources)) {
        if (!sourceUrl) continue; // Pula fontes sem URL espec√≠fica
        
        try {
          console.log(`   üì° ${sourceName} (${sourceUrl})`);
          
          const sourceNews = await newsService.fetchNewsFromSource({
            name: sourceName,
            url: sourceUrl
          });
          
          // Filtra not√≠cias recentes (√∫ltimas 24h)
          const recentNews = sourceNews.filter(item => {
            if (!item.pubDate) return false;
            const pubDate = new Date(item.pubDate);
            const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
            return !isNaN(pubDate.getTime()) && pubDate > twentyFourHoursAgo;
          });
          
          // Adiciona metadata da categoria e calcula score usando IA em batch
          console.log(`       ü§ñ Avaliando ${recentNews.length} not√≠cias em batch...`);
          
          const scores = await aiService.scoreCategoryRelevanceBatch(recentNews, category);
          
          const categorizedNews = recentNews.map((news, index) => ({
            ...news,
            category: category,
            sourceCategory: sourceName,
            relevanceScore: scores[index] || 50
          }));
          
          allNews.push(...categorizedNews);
          console.log(`       ‚Üí ${recentNews.length} not√≠cias recentes`);
          
        } catch (error) {
          console.log(`   ‚ùå Erro em ${sourceName}: ${error.message}`);
        }
      }
    }
    
    // Remove duplicatas
    const uniqueNews = this.removeDuplicates(allNews);
    console.log(`üîó ${uniqueNews.length} not√≠cias √∫nicas coletadas das categorias espec√≠ficas`);
    
    return uniqueNews;
  }

  // Busca not√≠cias gerais (fallback ou complemento)
  async getGeneralNews(limit = 6) {
    try {
      console.log(`üì∞ Buscando ${limit} not√≠cias gerais...`);
      
      const generalSources = [
        { name: 'G1 Geral', url: 'https://g1.globo.com/rss/g1/' },
        { name: 'Folha Geral', url: 'https://feeds.folha.uol.com.br/folha/rss091.xml' },
        { name: 'UOL Geral', url: 'https://rss.uol.com.br/feed/noticias.xml' },
        { name: 'Ag√™ncia Brasil', url: 'http://agenciabrasil.ebc.com.br/rss/ultimasnoticias/feed.xml' },
        { name: 'Opera Mundi', url: 'https://operamundi.uol.com.br/rss' }
      ];
      
      const allNews = [];
      
      for (const source of generalSources) {
        try {
          const sourceNews = await newsService.fetchNewsFromSource(source);
          
          // Filtra not√≠cias recentes
          const recentNews = sourceNews.filter(item => {
            if (!item.pubDate) return false;
            const pubDate = new Date(item.pubDate);
            const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
            return !isNaN(pubDate.getTime()) && pubDate > twentyFourHoursAgo;
          });
          
          // Calcula score das not√≠cias gerais usando IA em batch
          console.log(`       ü§ñ Avaliando ${recentNews.length} not√≠cias gerais em batch...`);
          
          const generalScores = await aiService.scoreCategoryRelevanceBatch(recentNews, 'geral');
          
          const generalNews = recentNews.map((news, index) => ({
            ...news,
            category: 'geral',
            relevanceScore: generalScores[index] || 50
          }));
          
          allNews.push(...generalNews);
          
        } catch (error) {
          console.log(`‚ùå Erro em ${source.name}: ${error.message}`);
        }
      }
      
      // Pega as melhores
      const uniqueNews = this.removeDuplicates(allNews);
      return uniqueNews.slice(0, limit);
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar not√≠cias gerais:', error);
      return [];
    }
  }

  // Calcula score usando IA (intelig√™ncia real, n√£o keywords)
  async calculateCategoryScore(news, category) {
    try {
      // Usa IA para avaliar relev√¢ncia da categoria
      const aiScore = await aiService.scoreCategoryRelevance(
        news.title, 
        news.originalContent || '', 
        category
      );
      
      console.log(`ü§ñ [${category}] "${news.title.substring(0, 40)}..." - Score IA: ${aiScore}`);
      return aiScore;
      
    } catch (error) {
      console.error(`‚ùå Erro ao calcular score IA para ${category}:`, error.message);
      
      // Fallback simples se IA falhar
      const title = news.title?.toLowerCase() || '';
      const content = news.originalContent?.toLowerCase() || '';
      const combined = title + ' ' + content;
      
      // Score b√°sico: se menciona a categoria, score m√©dio, sen√£o baixo
      if (combined.includes(category.toLowerCase())) {
        return 60;
      } else {
        return 30;
      }
    }
  }

  // Calcula score para not√≠cias gerais usando IA
  async calculateGeneralScore(news) {
    try {
      // Usa IA para avaliar relev√¢ncia geral
      const aiScore = await aiService.scoreNewsRelevance(
        news.title, 
        news.originalContent || '', 
        'geral'
      );
      
      console.log(`ü§ñ [geral] "${news.title.substring(0, 40)}..." - Score IA: ${aiScore}`);
      return aiScore;
      
    } catch (error) {
      console.error(`‚ùå Erro ao calcular score IA geral:`, error.message);
      
      // Fallback simples
      const title = news.title?.toLowerCase() || '';
      const content = news.originalContent?.toLowerCase() || '';
      const combined = title + ' ' + content;
      
      // Score b√°sico: palavras-chave relevantes
      const relevantKeywords = ['brasil', 'governo', 'presidente', 'economia', 'pol√≠tica'];
      const keywordMatches = relevantKeywords.filter(keyword => 
        combined.includes(keyword)
      ).length;
      
      return Math.min(80, Math.max(20, 40 + keywordMatches * 8));
    }
  }

  // Seleciona as melhores not√≠cias priorizando RELEV√ÇNCIA REAL via IA
  selectBestNews(allNews, targetCount) {
    // Com IA, scores s√£o mais precisos - come√ßa com 70+
    let candidateNews = allNews.filter(news => news.relevanceScore >= 70);
    
    console.log(`üìä Not√≠cias com score >= 70: ${candidateNews.length}/${allNews.length}`);
    
    // Se n√£o tem not√≠cias suficientes, reduz gradualmente o threshold
    if (candidateNews.length < targetCount) {
      candidateNews = allNews.filter(news => news.relevanceScore >= 60);
      console.log(`üìä Expandindo para score >= 60: ${candidateNews.length}/${allNews.length}`);
    }
    
    if (candidateNews.length < targetCount) {
      candidateNews = allNews.filter(news => news.relevanceScore >= 50);
      console.log(`üìä Expandindo para score >= 50: ${candidateNews.length}/${allNews.length}`);
    }
    
    if (candidateNews.length < targetCount) {
      candidateNews = allNews.filter(news => news.relevanceScore >= 40);
      console.log(`üìä Expandindo para score >= 40: ${candidateNews.length}/${allNews.length}`);
    }
    
    // Se ainda n√£o tem suficiente, pega TODAS e ordena por score
    if (candidateNews.length < targetCount) {
      candidateNews = allNews;
      console.log(`üìä Usando todas as not√≠cias (${allNews.length}) ordenadas por score`);
    }
    
    // Ordena por relev√¢ncia
    const sorted = candidateNews.sort((a, b) => b.relevanceScore - a.relevanceScore);
    
    const selected = [];
    const categoryCounts = {};
    
    // Prioriza as categorias do usu√°rio
    const priorityCategories = ['tecnologia', 'investimentos', 'volei', 'handebol', 'futebol'];
    
    // ESTRAT√âGIA: Garante diversidade de categorias
    const userCategories = ['tecnologia', 'investimentos', 'volei', 'handebol'];
    const categoriesSelected = new Set();
    
    // Primeira passada: UMA not√≠cia de cada categoria do usu√°rio
    for (const category of userCategories) {
      const categoryNews = sorted.filter(news => 
        news.category === category && !selected.includes(news) && news.relevanceScore >= 30
      );
      
      if (categoryNews.length > 0 && selected.length < targetCount) {
        selected.push(categoryNews[0]);
        categoriesSelected.add(category);
        categoryCounts[category] = 1;
        console.log(`‚úÖ Selecionada [${category}]: "${categoryNews[0].title.substring(0, 40)}..." (Score: ${categoryNews[0].relevanceScore})`);
      }
    }
    
    // Segunda passada: completa com futebol/esporte e gerais
    const otherCategories = ['futebol', 'esporte', 'geral'];
    for (const category of otherCategories) {
      if (selected.length >= targetCount) break;
      
      const categoryNews = sorted.filter(news => 
        news.category === category && !selected.includes(news) && news.relevanceScore >= 25
      );
      
      if (categoryNews.length > 0) {
        selected.push(categoryNews[0]);
        categoryCounts[category] = 1;
        console.log(`‚úÖ Selecionada [${category}]: "${categoryNews[0].title.substring(0, 40)}..." (Score: ${categoryNews[0].relevanceScore})`);
      }
    }
    
    // Terceira passada: completa com qualquer not√≠cia restante se ainda falta
    for (const news of sorted) {
      if (selected.length >= targetCount) break;
      if (selected.includes(news)) continue;
      
      selected.push(news);
      categoryCounts[news.category] = (categoryCounts[news.category] || 0) + 1;
      console.log(`‚úÖ Completando [${news.category}]: "${news.title.substring(0, 40)}..." (Score: ${news.relevanceScore})`);
    }
    
    // Log da distribui√ß√£o final
    console.log('\nüìä DISTRIBUI√á√ÉO FINAL DAS NOT√çCIAS:');
    Object.entries(categoryCounts).forEach(([cat, count]) => {
      console.log(`   ${cat}: ${count} not√≠cia(s)`);
    });
    console.log('');
    
    return selected.slice(0, targetCount);
  }

  // Remove duplicatas baseado no t√≠tulo
  removeDuplicates(news) {
    const seen = new Set();
    return news.filter(item => {
      const normalizedTitle = item.title?.toLowerCase()
        .replace(/[^\w\s]/g, '')
        .replace(/\s+/g, ' ')
        .trim();
      
      if (!normalizedTitle || seen.has(normalizedTitle)) {
        return false;
      }
      
      seen.add(normalizedTitle);
      return true;
    });
  }
}

export default new CategoryDrivenNewsService();