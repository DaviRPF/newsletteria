import { GoogleGenerativeAI } from '@google/generative-ai';
import { News } from '../models/News.js';
import tokenTracker from './tokenTracker.js';

class AIService {
  constructor() {
    this.genAI = null;
    this.model = null;
  }

  initializeAI() {
    if (!this.genAI && process.env.GEMINI_API_KEY) {
      console.log('ü§ñ Inicializando Gemini AI com API Key:', process.env.GEMINI_API_KEY.substring(0, 10) + '...');
      this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
      this.model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash-8b' });
    }
    return this.model;
  }

  async scoreNewsRelevance(title, content, source) {
    try {
      const model = this.initializeAI();
      if (!model) throw new Error('AI n√£o inicializada');
      
      const prompt = `
Analise este t√≠tulo de not√≠cia e d√™ uma pontua√ß√£o realista de 0 a 100:

CRIT√âRIOS:
- Impacto pol√≠tico/social nacional (0-25 pontos)
- Interesse do p√∫blico brasileiro (0-25 pontos)  
- Urg√™ncia/novidade (0-25 pontos)
- Relev√¢ncia jornal√≠stica (0-25 pontos)

T√çTULO: "${title}"
FONTE: ${source}

IMPORTANTE: 
- Use toda a escala de 0-100
- Seja cr√≠tico e realista
- Not√≠cias locais/espec√≠ficas = pontua√ß√£o menor
- Not√≠cias internacionais irrelevantes = pontua√ß√£o baixa
- Apenas eventos muito importantes = 80-100 pontos

Responda APENAS com um n√∫mero de 0 a 100, nada mais:`;

      const result = await model.generateContent(prompt);
      const response = await result.response;
      const responseText = response.text().trim();
      
      // Rastreia tokens
      tokenTracker.addEstimatedUsage('SCORE_NEWS', prompt, responseText, `"${title.substring(0, 30)}..."`);
      
      console.log(`ü§ñ DEBUG Score: "${title}" -> Resposta: "${responseText}"`);
      
      const score = parseInt(responseText.replace(/[^0-9]/g, ''));
      const finalScore = isNaN(score) ? 50 : Math.max(0, Math.min(100, score));
      
      console.log(`üìä DEBUG: Score final: ${finalScore}`);
      
      return finalScore;
    } catch (error) {
      console.error('Erro ao calcular relev√¢ncia:', error);
      return 50;
    }
  }

  async rewriteArticle(title, content, source, duplicateArticles = []) {
    try {
      const model = this.initializeAI();
      if (!model) throw new Error('AI n√£o inicializada');
      
      let prompt = `
Reescreva esta not√≠cia para um newsletter via WhatsApp seguindo estas diretrizes:

FORMATO:
- M√°ximo 4 par√°grafos
- Linguagem clara e acess√≠vel
- Tom informativo mas envolvente
- Foque nos fatos mais importantes
- Inclua contexto quando necess√°rio

ESTILO:
- Use emojis moderadamente (1-2 por par√°grafo)
- Frases curtas e diretas
- Evite jarg√£o t√©cnico
- Mantenha o interesse do leitor

CONTE√öDO ORIGINAL:
T√≠tulo: ${title}
Fonte: ${source}
Texto: ${content}
`;

      if (duplicateArticles.length > 0) {
        prompt += `\n\nARTIGOS SIMILARES PARA REFER√äNCIA:
${duplicateArticles.map(article => `
Fonte: ${article.source}
T√≠tulo: ${article.title}
Conte√∫do: ${article.originalContent.substring(0, 500)}...
`).join('\n')}

IMPORTANTE: Use as informa√ß√µes dos artigos similares para enriquecer a not√≠cia, mas escreva um texto √∫nico e coeso.`;
      }

      prompt += `\n\nEscreva APENAS o texto da not√≠cia reescrita, sem t√≠tulos ou formata√ß√£o extra.`;

      const result = await model.generateContent(prompt);
      const response = await result.response;
      const responseText = response.text().trim();
      
      // Rastreia tokens
      tokenTracker.addEstimatedUsage('REWRITE_ARTICLE', prompt, responseText, `"${title.substring(0, 30)}..."`);
      
      return responseText;
    } catch (error) {
      console.error('Erro ao reescrever artigo:', error);
      return content.substring(0, 500) + '...';
    }
  }

  async detectDuplicateNews(news1, news2) {
    try {
      const model = this.initializeAI();
      if (!model) throw new Error('AI n√£o inicializada');
      
      const prompt = `
Analise se estas duas not√≠cias s√£o sobre o mesmo evento/assunto:

NOT√çCIA 1:
T√≠tulo: ${news1.title}
Fonte: ${news1.source}
Conte√∫do: ${news1.originalContent.substring(0, 300)}...

NOT√çCIA 2:
T√≠tulo: ${news2.title}  
Fonte: ${news2.source}
Conte√∫do: ${news2.originalContent.substring(0, 300)}...

Responda apenas "SIM" se forem sobre o mesmo assunto principal, ou "NAO" se forem diferentes.
`;

      const result = await model.generateContent(prompt);
      const response = await result.response;
      
      return response.text().trim().toUpperCase() === 'SIM';
    } catch (error) {
      console.error('Erro na detec√ß√£o de duplicatas:', error);
      return false;
    }
  }

  async processUnprocessedNews(db) {
    console.log('Processando not√≠cias com IA...');
    
    const unprocessedNews = await News.getUnprocessedNews(db);
    console.log(`${unprocessedNews.length} not√≠cias para processar`);

    for (const news of unprocessedNews) {
      try {
        console.log(`Processando: ${news.title}`);
        
        const [score, rewrittenContent] = await Promise.all([
          this.scoreNewsRelevance(news.title, news.originalContent, news.source),
          this.rewriteArticle(news.title, news.originalContent, news.source)
        ]);

        await News.updateProcessedContent(db, news._id, rewrittenContent, score);
        
        console.log(`Processada: ${news.title} (Score: ${score})`);
        
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        console.error(`Erro ao processar not√≠cia ${news._id}:`, error);
      }
    }

    console.log('Processamento de not√≠cias conclu√≠do!');
  }

  async processDuplicateGroups(db, duplicateGroups) {
    console.log('Processando grupos de not√≠cias duplicadas...');

    for (const group of duplicateGroups) {
      try {
        const mainNews = group.reduce((prev, current) => {
          return (prev.originalContent.length > current.originalContent.length) ? prev : current;
        });

        const otherArticles = group.filter(news => news._id !== mainNews._id);

        const [score, rewrittenContent] = await Promise.all([
          this.scoreNewsRelevance(mainNews.title, mainNews.originalContent, mainNews.source),
          this.rewriteArticle(mainNews.title, mainNews.originalContent, mainNews.source, otherArticles)
        ]);

        await News.updateProcessedContent(db, mainNews._id, rewrittenContent, score);

        for (const article of otherArticles) {
          await db.collection('news').deleteOne({ _id: article._id });
        }

        console.log(`Grupo processado: ${mainNews.title} (${group.length} artigos similares)`);

      } catch (error) {
        console.error('Erro ao processar grupo de duplicatas:', error);
      }
    }
  }

  async generateDailyNewsletter(topNews) {
    try {
      const model = this.initializeAI();
      if (!model) throw new Error('AI n√£o inicializada');
      
      const newsTexts = topNews.map((news, index) => 
        `${index + 1}. ${news.title}\n${news.rewrittenContent}`
      ).join('\n\n---\n\n');

      const prompt = `
Com base nestas 4 not√≠cias principais do dia, crie uma mensagem de abertura envolvente para o newsletter:

${newsTexts}

Crie uma mensagem de 2-3 linhas que:
- Cumprimente o leitor
- Mencione brevemente os principais temas do dia
- Use um tom amig√°vel e profissional
- Use 1-2 emojis apropriados

Exemplo de formato:
üåÖ Bom dia! Hoje trouxemos as principais not√≠cias sobre [tema1], [tema2] e [tema3]. Confira:
`;

      const result = await model.generateContent(prompt);
      const response = await result.response;
      
      return response.text().trim();
    } catch (error) {
      console.error('Erro ao gerar introdu√ß√£o:', error);
      return 'üì∞ Bom dia! Aqui est√£o as principais not√≠cias de hoje:';
    }
  }

  async compareSimilarity(title1, title2, content1 = '', content2 = '') {
    try {
      const model = this.initializeAI();
      if (!model) throw new Error('AI n√£o inicializada');
      
      const prompt = `
Analise a similaridade entre estas duas not√≠cias e retorne um valor de 0.0 a 1.0:

NOT√çCIA 1:
T√≠tulo: ${title1}
Conte√∫do: ${content1.substring(0, 300)}...

NOT√çCIA 2:
T√≠tulo: ${title2}
Conte√∫do: ${content2.substring(0, 300)}...

Crit√©rios:
- 0.0-0.4: Not√≠cias completamente diferentes
- 0.5-0.7: Not√≠cias com alguns elementos em comum
- 0.75-0.9: Not√≠cias muito similares sobre o mesmo assunto
- 0.95-1.0: Not√≠cias praticamente id√™nticas

Considere:
- Mesmo evento/pessoa principal
- Mesma data/contexto
- Informa√ß√µes principais similares

Retorne APENAS o n√∫mero decimal (ex: 0.85), sem explica√ß√µes.
`;

      const result = await model.generateContent(prompt);
      const response = await result.response;
      const similarity = parseFloat(response.text().trim());
      
      return isNaN(similarity) ? 0.5 : Math.max(0, Math.min(1, similarity));
    } catch (error) {
      console.error('Erro ao comparar similaridade:', error);
      return 0.5;
    }
  }

  async consolidateNews(articles) {
    try {
      const model = this.initializeAI();
      if (!model) throw new Error('AI n√£o inicializada');
      
      const articlesText = articles.map((article, index) => `
FONTE ${index + 1}: ${article.source}
T√çTULO: ${article.title}
URL: ${article.url}
CONTE√öDO: ${article.content.substring(0, 800)}...
`).join('\n---\n');

      const prompt = `
Voc√™ recebeu a mesma not√≠cia de m√∫ltiplas fontes. Crie uma vers√£o consolidada que:

1. T√çTULO: Crie um t√≠tulo claro e informativo que capture a ess√™ncia da not√≠cia
2. CONTE√öDO: Escreva um artigo consolidado que:
   - Combine as melhores informa√ß√µes de todas as fontes
   - Seja objetivo e factual
   - Tenha 3-4 par√°grafos
   - Use linguagem clara para WhatsApp
   - Inclua os detalhes mais importantes
   - Mencione perspectivas diferentes se existirem

FONTES DISPON√çVEIS:
${articlesText}

FORMATO DE RESPOSTA:
T√çTULO: [t√≠tulo consolidado]

CONTE√öDO: [artigo consolidado]

Escreva APENAS no formato acima, sem explica√ß√µes adicionais.
`;

      const result = await model.generateContent(prompt);
      const response = await result.response;
      const text = response.text().trim();
      
      // Parse da resposta
      const titleMatch = text.match(/T√çTULO:\s*(.+?)(?:\n|$)/);
      const contentMatch = text.match(/CONTE√öDO:\s*([\s\S]+)/);
      
      return {
        title: titleMatch ? titleMatch[1].trim() : articles[0].title,
        content: contentMatch ? contentMatch[1].trim() : articles[0].content
      };
    } catch (error) {
      console.error('Erro ao consolidar not√≠cias:', error);
      return {
        title: articles[0].title,
        content: articles[0].content
      };
    }
  }

  async createAdvancedScore(title, content, source, context = {}) {
    try {
      const model = this.initializeAI();
      if (!model) throw new Error('AI n√£o inicializada');
      
      const prompt = `
Analise esta not√≠cia com crit√©rios avan√ßados e d√™ uma pontua√ß√£o de 0 a 100:

CRIT√âRIOS PRINCIPAIS (peso maior):
1. Impacto pol√≠tico/econ√¥mico nacional (0-20 pontos)
2. Relev√¢ncia social/interesse p√∫blico (0-20 pontos)
3. Urg√™ncia/atualidade da informa√ß√£o (0-20 pontos)
4. Qualidade e credibilidade da fonte (0-15 pontos)

CRIT√âRIOS SECUND√ÅRIOS:
5. Originalidade da informa√ß√£o (0-10 pontos)
6. Potencial de engajamento (0-10 pontos)
7. Clareza e completude da informa√ß√£o (0-5 pontos)

NOT√çCIA:
T√≠tulo: ${title}
Fonte: ${source}
Conte√∫do: ${content.substring(0, 1200)}...

${context.sourceCount ? `Esta not√≠cia foi encontrada em ${context.sourceCount} fontes diferentes.` : ''}
${context.consolidated ? 'Esta √© uma not√≠cia consolidada de m√∫ltiplas fontes.' : ''}

BONIFICA√á√ïES ESPECIAIS:
- +5 pontos se for not√≠cia exclusiva/breaking news
- +3 pontos se afetar diretamente o cidad√£o brasileiro
- +2 pontos se for sobre figuras pol√≠ticas importantes
- +5 pontos se for encontrada em m√∫ltiplas fontes confi√°veis

Retorne APENAS o n√∫mero da pontua√ß√£o (0-100), sem explica√ß√µes.
`;

      const result = await model.generateContent(prompt);
      const response = await result.response;
      const responseText = response.text().trim();
      const score = parseInt(responseText);
      
      // Rastreia tokens
      tokenTracker.addEstimatedUsage('ADVANCED_SCORE', prompt, responseText, `"${title.substring(0, 30)}..."`);
      
      return isNaN(score) ? 50 : Math.max(0, Math.min(100, score));
    } catch (error) {
      console.error('Erro ao calcular pontua√ß√£o avan√ßada:', error);
      return 50;
    }
  }

  async generatePersonalizedImpact(newsTitle, newsContent, userProfile) {
    try {
      const model = this.initializeAI();
      if (!model) throw new Error('AI n√£o inicializada');

      if (!userProfile || !userProfile.trim()) {
        return null; // N√£o gera an√°lise se n√£o tem perfil
      }

      const prompt = `
Analise como esta not√≠cia pode impactar especificamente este usu√°rio baseado no perfil dele:

PERFIL DO USU√ÅRIO:
${userProfile}

NOT√çCIA:
T√≠tulo: ${newsTitle}
Conte√∫do: ${newsContent.substring(0, 800)}...

INSTRU√á√ïES:
1. Escreva uma an√°lise personalizada de 2-3 frases
2. Foque especificamente em como isso afeta a vida/profiss√£o/interesses desta pessoa
3. Use uma linguagem direta e relevante
4. Seja espec√≠fico, n√£o gen√©rico
5. Se a not√≠cia n√£o tem rela√ß√£o clara com o perfil, diga "Esta not√≠cia n√£o tem impacto direto no seu perfil atual."

EXEMPLOS DE BOA AN√ÅLISE:
- Para estudante de medicina: "Como futuro m√©dico, essa mudan√ßa na regulamenta√ß√£o do SUS pode afetar suas oportunidades de resid√™ncia em hospitais p√∫blicos."
- Para empres√°rio: "Essa nova pol√≠tica fiscal pode aumentar seus custos operacionais em cerca de 3-5% se sua empresa se enquadra no Simples Nacional."

Escreva APENAS a an√°lise, sem t√≠tulos ou formata√ß√£o extra:
`;

      const result = await model.generateContent(prompt);
      const response = await result.response;
      const analysis = response.text().trim();

      // Rastreia tokens
      tokenTracker.addEstimatedUsage('PERSONALIZED_IMPACT', prompt, analysis, `"${newsTitle.substring(0, 30)}..."`);

      // Valida se √© uma resposta √∫til
      if (analysis.length < 20 || analysis.toLowerCase().includes('n√£o posso') || analysis.toLowerCase().includes('n√£o √© poss√≠vel')) {
        return null;
      }

      return analysis;
    } catch (error) {
      console.error('Erro ao gerar an√°lise personalizada:', error);
      return null;
    }
  }
}

export default new AIService();