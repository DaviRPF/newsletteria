import newsService from './newsService.js';
import aiService from './aiService.js';

class TempNewsService {
  constructor() {
    this.cachedNews = [];
    this.lastUpdate = null;
  }

  async getLatestNews() {
    // Atualiza cache a cada 30 minutos
    const now = new Date();
    if (!this.lastUpdate || (now - this.lastUpdate) > 30 * 60 * 1000) {
      console.log('üîÑ Atualizando cache de not√≠cias...');
      await this.updateNewsCache();
    }

    return this.cachedNews;
  }

  async updateNewsCache() {
    try {
      console.log('üì∞ Coletando not√≠cias dos RSS feeds...');
      
      // Coleta not√≠cias sem banco de dados
      const allNews = await newsService.fetchAllNews(null);
      console.log(`‚úÖ ${allNews.length} not√≠cias coletadas`);

      if (allNews.length === 0) {
        console.log('‚ö†Ô∏è Nenhuma not√≠cia coletada, mantendo cache anterior');
        return;
      }

      // Filtra not√≠cias das √∫ltimas 24 horas
      const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
      console.log(`‚è∞ Filtrando not√≠cias mais recentes que: ${twentyFourHoursAgo.toLocaleString('pt-BR')}`);
      
      const recentNews = allNews.filter(news => {
        if (!news.pubDate) {
          console.log(`üì∞ Not√≠cia sem data descartada [${news.source}]: ${news.title?.substring(0, 50)}...`);
          return false; // Se n√£o tem data, n√£o inclui (mais restritivo)
        }
        const newsDate = new Date(news.pubDate);
        const isValid = !isNaN(newsDate.getTime()) && newsDate > twentyFourHoursAgo;
        if (!isValid) {
          console.log(`üóìÔ∏è Not√≠cia antiga descartada [${news.source}] (${newsDate.toLocaleString('pt-BR')}): ${news.title?.substring(0, 50)}...`);
        } else {
          console.log(`‚úÖ Not√≠cia aceita [${news.source}] (${newsDate.toLocaleString('pt-BR')}): ${news.title?.substring(0, 50)}...`);
        }
        return isValid;
      });

      console.log(`üìÖ ${recentNews.length} not√≠cias das √∫ltimas 24 horas`);

      // Remove duplicatas por similaridade de t√≠tulo
      const uniqueNews = await this.removeDuplicates(recentNews);
      console.log(`üîÑ ${uniqueNews.length} not√≠cias √∫nicas ap√≥s remo√ß√£o de duplicatas`);

      // PRIMEIRO: Processa com sistema local para obter pontua√ß√£o inicial
      console.log('üß† Fazendo pontua√ß√£o inicial com sistema local...');
      const localProcessed = this.processNewsLocally(uniqueNews);
      
      // SEGUNDO: Ordena por relev√¢ncia e pega apenas as TOP 4
      const top4News = localProcessed
        .sort((a, b) => b.relevanceScore - a.relevanceScore)
        .slice(0, 4);
      
      console.log(`üéØ Selecionadas as TOP 4 not√≠cias para processamento com IA`);

      // TERCEIRO: S√≥ agora processa as TOP 4 com IA se dispon√≠vel
      let finalNews;
      try {
        // Verifica se a API key est√° configurada e n√£o √© a padr√£o
        const hasValidKey = process.env.GEMINI_API_KEY && 
                           process.env.GEMINI_API_KEY !== 'your-gemini-api-key' &&
                           process.env.GEMINI_API_KEY.length > 30;
        
        if (hasValidKey) {
          console.log('ü§ñ Refinando TOP 4 not√≠cias com IA Gemini...');
          finalNews = await this.processWithAI(top4News);
          console.log('‚úÖ Refinamento com IA bem-sucedido');
        } else {
          console.log('‚ö†Ô∏è API key Gemini inv√°lida, usando processamento local');
          finalNews = top4News;
        }
      } catch (error) {
        console.log('‚ùå Erro na IA, mantendo processamento local:', error.message);
        finalNews = top4News;
      }
      
      this.cachedNews = finalNews;

      this.lastUpdate = new Date();
      console.log(`‚úÖ Cache atualizado com ${this.cachedNews.length} not√≠cias`);

    } catch (error) {
      console.error('‚ùå Erro ao atualizar cache de not√≠cias:', error);
    }
  }

  async removeDuplicates(news) {
    console.log(`üîç Analisando ${news.length} not√≠cias para detectar duplicatas...`);
    
    // Agrupa not√≠cias por similaridade usando IA quando dispon√≠vel
    const groups = [];
    const processed = new Set();
    
    for (let i = 0; i < news.length; i++) {
      if (processed.has(i)) continue;
      
      const currentNews = news[i];
      const group = {
        main: currentNews,
        duplicates: [],
        sources: [currentNews.source],
        urls: [currentNews.originalUrl]
      };
      
      processed.add(i);
      
      // Procura por not√≠cias similares
      for (let j = i + 1; j < news.length; j++) {
        if (processed.has(j)) continue;
        
        const compareNews = news[j];
        const similarity = await this.calculateAdvancedSimilarity(currentNews, compareNews);
        
        if (similarity > 0.75) { // 75% de similaridade = duplicata
          console.log(`üîÑ Duplicata encontrada (${Math.round(similarity * 100)}%): [${currentNews.source}] "${currentNews.title.substring(0, 30)}..." ‚âà [${compareNews.source}] "${compareNews.title.substring(0, 30)}..."`);
          
          group.duplicates.push(compareNews);
          group.sources.push(compareNews.source);
          group.urls.push(compareNews.originalUrl);
          processed.add(j);
        }
      }
      
      groups.push(group);
    }
    
    console.log(`‚úÖ ${groups.length} grupos √∫nicos criados (${news.length - groups.length} duplicatas removidas)`);
    
    // Cria vers√µes consolidadas das not√≠cias
    const uniqueNews = [];
    for (const group of groups) {
      if (group.duplicates.length > 0) {
        // Combina informa√ß√µes de m√∫ltiplas fontes
        console.log(`üìä Consolidando: [${group.sources.join(' + ')}] "${group.main.title.substring(0, 40)}..." (${group.duplicates.length + 1} fontes)`);
        const consolidatedNews = await this.consolidateNews(group);
        uniqueNews.push(consolidatedNews);
      } else {
        console.log(`üì∞ Not√≠cia √∫nica: [${group.main.source}] "${group.main.title.substring(0, 40)}..."`);
        uniqueNews.push(group.main);
      }
    }
    
    return uniqueNews;
  }

  normalizeTitle(title) {
    return title.toLowerCase()
      .replace(/[^\w\s]/g, ' ')
      .replace(/\s+/g, ' ')
      .trim();
  }

  calculateSimilarity(title1, title2) {
    const words1 = title1.split(' ');
    const words2 = title2.split(' ');
    
    const intersection = words1.filter(word => words2.includes(word) && word.length > 2);
    const union = [...new Set([...words1, ...words2])];
    
    return intersection.length / union.length;
  }

  async calculateAdvancedSimilarity(news1, news2) {
    // An√°lise local aprimorada (sem depender de IA)
    const title1 = this.normalizeTitle(news1.title);
    const title2 = this.normalizeTitle(news2.title);
    
    // Similaridade b√°sica de t√≠tulos
    const titleSimilarity = this.calculateSimilarity(title1, title2);
    
    // Verifica palavras-chave importantes
    const keywords1 = this.extractKeywords(title1);
    const keywords2 = this.extractKeywords(title2);
    const keywordMatch = keywords1.filter(k => keywords2.includes(k)).length / Math.max(keywords1.length, keywords2.length);
    
    // Pontua√ß√£o final combinada
    return (titleSimilarity * 0.7) + (keywordMatch * 0.3);
  }

  extractKeywords(text) {
    const stopWords = ['de', 'da', 'do', 'das', 'dos', 'em', 'no', 'na', 'nos', 'nas', 'por', 'para', 'com', 'sem', 'sob', 'sobre', 'entre', 'at√©', 'ap√≥s', 'antes', 'durante', 'contra', 'atrav√©s', 'pela', 'pelo', 'pelas', 'pelos', '√†', 'ao', '√†s', 'aos', 'um', 'uma', 'uns', 'umas', 'o', 'a', 'os', 'as', 'e', 'ou', 'mas', 'que', 'se', '√©', 's√£o', 'foi', 'foram', 'ser√°', 'ser√£o', 'tem', 't√™m', 'teve', 'tiveram', 'ter√°', 'ter√£o'];
    
    return text.split(' ')
      .filter(word => word.length > 3 && !stopWords.includes(word))
      .slice(0, 10); // Pega as 10 palavras mais relevantes
  }

  async consolidateNews(group) {
    console.log(`üîó Consolidando not√≠cia: "${group.main.title.substring(0, 50)}..." de ${group.sources.length} fontes`);
    
    // Consolida√ß√£o local - pega o conte√∫do mais completo
    const longestContent = [group.main, ...group.duplicates]
      .sort((a, b) => (b.originalContent?.length || 0) - (a.originalContent?.length || 0))[0];
    
    return {
      ...longestContent,
      source: `${group.sources.join(', ')} (${group.sources.length} fontes)`,
      originalUrl: group.urls[0],
      alternativeUrls: group.urls.slice(1),
      consolidated: true,
      sourceCount: group.sources.length
    };
  }

  async processWithAI(news) {
    const processedNews = [];

    for (const item of news) {
      try {
        console.log(`ü§ñ Processando: ${item.title.substring(0, 50)}...`);

        // Faz scraping do conte√∫do completo se necess√°rio
        let fullContent = item.originalContent;
        if (!fullContent || fullContent.length < 200) {
          try {
            fullContent = await newsService.scrapeFullContent(item.originalUrl);
          } catch (scrapeError) {
            console.log(`‚ö†Ô∏è Erro no scraping de ${item.originalUrl}: ${scrapeError.message}`);
          }
        }

        // Processa com IA avan√ßada se tiver conte√∫do
        if (fullContent && fullContent.length > 100) {
          const context = {
            sourceCount: item.sourceCount || 1,
            consolidated: item.consolidated || false
          };

          const [score, rewrittenContent] = await Promise.all([
            aiService.createAdvancedScore(item.title, fullContent, item.source, context),
            aiService.rewriteArticle(item.title, fullContent, item.source, item.alternativeUrls || [])
          ]);

          processedNews.push({
            ...item,
            originalContent: fullContent,
            rewrittenContent,
            relevanceScore: score,
            processed: true,
            aiProcessed: true
          });
        } else {
          // Se n√£o conseguiu conte√∫do, usa sistema local para essa not√≠cia
          const localProcessed = this.processNewsLocally([item])[0];
          processedNews.push(localProcessed);
        }

        // Delay maior para n√£o esgotar quota da API gratuita
        await new Promise(resolve => setTimeout(resolve, 4000));

      } catch (error) {
        console.error(`‚ùå Erro ao processar ${item.title}:`, error.message);
        
        // Em caso de erro, usa sistema local para essa not√≠cia
        const localProcessed = this.processNewsLocally([item])[0];
        processedNews.push(localProcessed);
      }
    }

    return processedNews;
  }

  // Sistema de pontua√ß√£o local (fallback quando IA n√£o funciona)
  processNewsLocally(news) {
    const processedNews = news.map((item, index) => {
      let score = 60; // Score base mais alto
      
      // Palavras-chave que aumentam relev√¢ncia (peso alto)
      const highRelevanceKeywords = [
        'brasil', 'lula', 'bolsonaro', 'governo', 'pol√≠tica', 'economia', 
        'elei√ß√£o', 'supremo', 'stf', 'congresso', 'senado', 'deputado',
        'ministro', 'presidente', 'covid', 'pandemia', 'vacina',
        'petrobras', 'banco central', 'infla√ß√£o', 'pib', 'real',
        'amaz√¥nia', 'meio ambiente', 'desmatamento', 'ind√≠gena',
        'pgr', 'pris√£o', 'zambelli', 'portugal', 'brasileiros',
        'milh√µes', 'combate', 'cristina kirchner', 'argentino'
      ];
      
      const mediumRelevanceKeywords = [
        'rio', 's√£o paulo', 'salvador', 'belo horizonte', 'bras√≠lia',
        'sa√∫de', 'educa√ß√£o', 'viol√™ncia', 'seguran√ßa', 'corrup√ß√£o',
        'investiga√ß√£o', 'opera√ß√£o', 'pol√≠cia federal', 'justi√ßa',
        'onu', 'internacional', 'guerra', 'sud√£o', 'enchentes'
      ];
      
      const title = item.title?.toLowerCase() || '';
      const content = item.originalContent?.toLowerCase() || '';
      const combined = title + ' ' + content;
      
      // Pontua√ß√£o por palavras-chave (aumentei os valores)
      highRelevanceKeywords.forEach(keyword => {
        if (combined.includes(keyword)) {
          score += title.includes(keyword) ? 25 : 15; // Mais pontos se estiver no t√≠tulo
        }
      });
      
      mediumRelevanceKeywords.forEach(keyword => {
        if (combined.includes(keyword)) {
          score += title.includes(keyword) ? 12 : 8;
        }
      });
      
      // Pontua√ß√£o por fonte (aumentei)
      if (item.source?.includes('Opera Mundi')) score += 15;
      if (item.source?.includes('Ag√™ncia Brasil')) score += 20;
      if (item.source?.includes('UOL')) score += 12;
      
      // Pontua√ß√£o por rec√™ncia (mais recente = mais pontos)
      const hoursAgo = (new Date() - new Date(item.pubDate)) / (1000 * 60 * 60);
      if (hoursAgo < 1) score += 30;
      else if (hoursAgo < 3) score += 25;
      else if (hoursAgo < 6) score += 20;
      else if (hoursAgo < 12) score += 15;
      else if (hoursAgo < 24) score += 10;
      
      // Bonus para not√≠cias com mais conte√∫do
      if (content.length > 200) score += 10;
      if (content.length > 500) score += 15;
      
      // Desconta pontos para t√≠tulos muito curtos ou muito longos
      if (title.length < 20) score -= 15;
      if (title.length > 200) score -= 10;
      
      // Adiciona varia√ß√£o baseada na posi√ß√£o para evitar empates
      score += Math.random() * 5;
      
      // Garante score entre 10 e 100
      score = Math.max(10, Math.min(100, score));
      
      console.log(`üìä [${item.source}] "${title.substring(0, 40)}..." - Score: ${Math.round(score)}`);
      
      return {
        ...item,
        relevanceScore: Math.round(score),
        rewrittenContent: this.formatContent(item),
        processed: true // Marca como processado pelo sistema local
      };
    });
    
    return processedNews;
  }
  
  // Formata o conte√∫do de forma mais leg√≠vel
  formatContent(item) {
    let content = item.originalContent || item.title;
    
    // Remove tags HTML se houver
    content = content.replace(/<[^>]*>/g, '');
    
    // Limita o tamanho do conte√∫do
    if (content.length > 500) {
      content = content.substring(0, 500) + '...';
    }
    
    // Remove m√∫ltiplos espa√ßos e quebras de linha
    content = content.replace(/\s+/g, ' ').trim();
    
    return content;
  }

  // M√©todo para for√ßar atualiza√ß√£o
  async forceUpdate() {
    this.lastUpdate = null;
    await this.getLatestNews();
  }
}

export default new TempNewsService();